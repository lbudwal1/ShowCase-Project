// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Api.Infrastructure.Data.EntityFramework;

namespace Web.Api.Infrastructure.Migrations.DemoDB
{
    [DbContext(typeof(DemoDBContext))]
    [Migration("20210131053920_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview2-35157")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.Address", b =>
                {
                    b.Property<int>("BaseEntityId");

                    b.Property<int>("AddressTypeId");

                    b.Property<int?>("CityId");

                    b.Property<int?>("CountryId");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("Line1")
                        .HasMaxLength(150);

                    b.Property<string>("Line2")
                        .HasMaxLength(150);

                    b.Property<string>("PostalArea")
                        .HasMaxLength(10);

                    b.HasKey("BaseEntityId", "AddressTypeId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Address","Core");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.AddressType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("AddressType","Core");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PreferredPhoneTypeId");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity","Core");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.BaseEntityComment", b =>
                {
                    b.Property<int>("AboutId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText")
                        .IsRequired();

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentCommentId");

                    b.Property<int>("PostedById");

                    b.HasKey("AboutId", "Id");

                    b.HasIndex("PostedById");

                    b.HasIndex("AboutId", "ParentCommentId");

                    b.ToTable("BaseEntityComment","Core");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Category","Inventory");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistrictId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("City","Core");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Country","Core");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Customer","Sales");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("District","Core");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.Item", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("StockNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Item","Inventory");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.Phone", b =>
                {
                    b.Property<int>("BaseEntityId");

                    b.Property<int>("PhoneTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("BaseEntityId", "PhoneTypeId");

                    b.HasIndex("PhoneTypeId");

                    b.ToTable("Phone","Core");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.PhoneType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("PhoneType","Core");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.StoreLocation", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("StoreLocation","Core");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.StoreLocationCustomer", b =>
                {
                    b.Property<int>("StoreLocationId");

                    b.Property<int>("CustomerId");

                    b.HasKey("StoreLocationId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("StoreLocationCustomer","Sales");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.Address", b =>
                {
                    b.HasOne("Web.Api.Infrastructure.Data.Entities.AddressType", "AddressType")
                        .WithMany("Address")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_Address_AddressType");

                    b.HasOne("Web.Api.Infrastructure.Data.Entities.BaseEntity", "BaseEntity")
                        .WithMany("Address")
                        .HasForeignKey("BaseEntityId")
                        .HasConstraintName("FK_Address_BaseEntity");

                    b.HasOne("Web.Api.Infrastructure.Data.Entities.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Address_City");

                    b.HasOne("Web.Api.Infrastructure.Data.Entities.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Address_Country");

                    b.HasOne("Web.Api.Infrastructure.Data.Entities.District", "District")
                        .WithMany("Address")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Address_District");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.BaseEntity", b =>
                {
                    b.HasOne("Web.Api.Infrastructure.Data.Entities.Customer", "IdNavigation")
                        .WithOne("BaseEntity")
                        .HasForeignKey("Web.Api.Infrastructure.Data.Entities.BaseEntity", "Id")
                        .HasConstraintName("FK_BaseEntity_Customer");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.BaseEntityComment", b =>
                {
                    b.HasOne("Web.Api.Infrastructure.Data.Entities.BaseEntity", "About")
                        .WithMany("BaseEntityCommentAbout")
                        .HasForeignKey("AboutId")
                        .HasConstraintName("FK_BaseEntityComment_BaseEntity");

                    b.HasOne("Web.Api.Infrastructure.Data.Entities.BaseEntity", "PostedBy")
                        .WithMany("BaseEntityCommentPostedBy")
                        .HasForeignKey("PostedById")
                        .HasConstraintName("FK_BaseEntityComment_BaseEntity1");

                    b.HasOne("Web.Api.Infrastructure.Data.Entities.BaseEntityComment", "BaseEntityCommentNavigation")
                        .WithMany("InverseBaseEntityCommentNavigation")
                        .HasForeignKey("AboutId", "ParentCommentId")
                        .HasConstraintName("FK_BaseEntityComment_BaseEntityComment");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.City", b =>
                {
                    b.HasOne("Web.Api.Infrastructure.Data.Entities.District", "District")
                        .WithMany("City")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_City_District");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.District", b =>
                {
                    b.HasOne("Web.Api.Infrastructure.Data.Entities.Country", "Country")
                        .WithMany("District")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_District_Country");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.Item", b =>
                {
                    b.HasOne("Web.Api.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Item")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Item_Category");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.Phone", b =>
                {
                    b.HasOne("Web.Api.Infrastructure.Data.Entities.BaseEntity", "BaseEntity")
                        .WithMany("Phone")
                        .HasForeignKey("BaseEntityId")
                        .HasConstraintName("FK_Phone_BaseEntity");

                    b.HasOne("Web.Api.Infrastructure.Data.Entities.PhoneType", "PhoneType")
                        .WithMany("Phone")
                        .HasForeignKey("PhoneTypeId")
                        .HasConstraintName("FK_Phone_PhoneType");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.StoreLocation", b =>
                {
                    b.HasOne("Web.Api.Infrastructure.Data.Entities.BaseEntity", "IdNavigation")
                        .WithOne("StoreLocation")
                        .HasForeignKey("Web.Api.Infrastructure.Data.Entities.StoreLocation", "Id")
                        .HasConstraintName("FK_StoreLocation_BaseEntity");
                });

            modelBuilder.Entity("Web.Api.Infrastructure.Data.Entities.StoreLocationCustomer", b =>
                {
                    b.HasOne("Web.Api.Infrastructure.Data.Entities.Customer", "Customer")
                        .WithMany("StoreLocationCustomer")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_StoreLocationCustomer_Customer");

                    b.HasOne("Web.Api.Infrastructure.Data.Entities.StoreLocation", "StoreLocation")
                        .WithMany("StoreLocationCustomer")
                        .HasForeignKey("StoreLocationId")
                        .HasConstraintName("FK_StoreLocationCustomer_StoreLocation");
                });
#pragma warning restore 612, 618
        }
    }
}
